{"version":3,"file":"build/vendor.bundle.07d15f9cc799b03ec10f.js","sources":["webpack:///./node_modules/videojs-contrib-media-sources/node_modules/video.js/es5/control-bar/time-controls/remaining-time-display.js"],"sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nvar _component = require('../../component.js');\n\nvar _component2 = _interopRequireDefault(_component);\n\nvar _dom = require('../../utils/dom.js');\n\nvar Dom = _interopRequireWildcard(_dom);\n\nvar _formatTime = require('../../utils/format-time.js');\n\nvar _formatTime2 = _interopRequireDefault(_formatTime);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file remaining-time-display.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * Displays the time left in the video\n *\n * @extends Component\n */\nvar RemainingTimeDisplay = function (_Component) {\n  _inherits(RemainingTimeDisplay, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function RemainingTimeDisplay(player, options) {\n    _classCallCheck(this, RemainingTimeDisplay);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.on(player, 'timeupdate', _this.updateContent);\n    _this.on(player, 'durationchange', _this.updateContent);\n    return _this;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  RemainingTimeDisplay.prototype.createEl = function createEl() {\n    var el = _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-remaining-time vjs-time-control vjs-control'\n    });\n\n    this.contentEl_ = Dom.createEl('div', {\n      className: 'vjs-remaining-time-display',\n      // label the remaining time for screen reader users\n      innerHTML: '<span class=\"vjs-control-text\">' + this.localize('Remaining Time') + '</span> -0:00'\n    }, {\n      // tell screen readers not to automatically read the time as it changes\n      'aria-live': 'off'\n    });\n\n    el.appendChild(this.contentEl_);\n    return el;\n  };\n\n  /**\n   * Update remaining time display.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate` or `durationchange` event that caused this to run.\n   *\n   * @listens Player#timeupdate\n   * @listens Player#durationchange\n   */\n\n\n  RemainingTimeDisplay.prototype.updateContent = function updateContent(event) {\n    if (this.player_.duration()) {\n      var localizedText = this.localize('Remaining Time');\n      var formattedTime = (0, _formatTime2['default'])(this.player_.remainingTime());\n\n      if (formattedTime !== this.formattedTime_) {\n        this.formattedTime_ = formattedTime;\n        this.contentEl_.innerHTML = '<span class=\"vjs-control-text\">' + localizedText + '</span> -' + formattedTime;\n      }\n    }\n\n    // Allows for smooth scrubbing, when player can't keep up.\n    // var time = (this.player_.scrubbing()) ? this.player_.getCache().currentTime : this.player_.currentTime();\n    // this.contentEl_.innerHTML = vjs.formatTime(time, this.player_.duration());\n  };\n\n  return RemainingTimeDisplay;\n}(_component2['default']);\n\n_component2['default'].registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);\nexports['default'] = RemainingTimeDisplay;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/videojs-contrib-media-sources/node_modules/video.js/es5/control-bar/time-controls/remaining-time-display.js\n// module id = +0wB\n// module chunks = 0"],"mappings":"AAkBA","sourceRoot":""}